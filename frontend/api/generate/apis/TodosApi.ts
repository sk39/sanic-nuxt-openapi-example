/* tslint:disable */
/* eslint-disable */
/**
 * todo
 * Todo app api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateTodoParam,
    CreateTodoParamFromJSON,
    CreateTodoParamToJSON,
    Errors,
    ErrorsFromJSON,
    ErrorsToJSON,
    ListTodo,
    ListTodoFromJSON,
    ListTodoToJSON,
    Todo,
    TodoFromJSON,
    TodoToJSON,
    UpdateTodoParam,
    UpdateTodoParamFromJSON,
    UpdateTodoParamToJSON,
} from '../models';

export interface CreateTodoRequest {
    createTodoParam?: CreateTodoParam;
}

export interface GetTodoRequest {
    id: string;
}

export interface RemoveTodoRequest {
    id: string;
}

export interface UpdateTodoRequest {
    id: string;
    updateTodoParam?: UpdateTodoParam;
}

/**
 * 
 */
export class TodosApi extends runtime.BaseAPI {

    /**
     * 新しいTodoを作成する
     * Create new todo
     */
    async createTodoRaw(requestParameters: CreateTodoRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTodoParamToJSON(requestParameters.createTodoParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 新しいTodoを作成する
     * Create new todo
     */
    async createTodo(createTodoParam?: CreateTodoParam): Promise<void> {
        await this.createTodoRaw({ createTodoParam: createTodoParam });
    }

    /**
     * Todoを取得する
     * Get a todo
     */
    async getTodoRaw(requestParameters: GetTodoRequest): Promise<runtime.ApiResponse<Todo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTodo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoFromJSON(jsonValue));
    }

    /**
     * Todoを取得する
     * Get a todo
     */
    async getTodo(id: string): Promise<Todo> {
        const response = await this.getTodoRaw({ id: id });
        return await response.value();
    }

    /**
     * ログインユーザのTodo一覧を取得する
     * Get all todo
     */
    async listTodoRaw(): Promise<runtime.ApiResponse<ListTodo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTodoFromJSON(jsonValue));
    }

    /**
     * ログインユーザのTodo一覧を取得する
     * Get all todo
     */
    async listTodo(): Promise<ListTodo> {
        const response = await this.listTodoRaw();
        return await response.value();
    }

    /**
     * Todoを削除する
     * Remove a todo
     */
    async removeTodoRaw(requestParameters: RemoveTodoRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeTodo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Todoを削除する
     * Remove a todo
     */
    async removeTodo(id: string): Promise<void> {
        await this.removeTodoRaw({ id: id });
    }

    /**
     * Todoを更新する
     * Update a todo
     */
    async updateTodoRaw(requestParameters: UpdateTodoRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTodo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTodoParamToJSON(requestParameters.updateTodoParam),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Todoを更新する
     * Update a todo
     */
    async updateTodo(id: string, updateTodoParam?: UpdateTodoParam): Promise<void> {
        await this.updateTodoRaw({ id: id, updateTodoParam: updateTodoParam });
    }

}
