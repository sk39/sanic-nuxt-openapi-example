/* tslint:disable */
/* eslint-disable */
/**
 * todo
 * Todo app api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthParam,
    AuthParamFromJSON,
    AuthParamToJSON,
    AuthToken,
    AuthTokenFromJSON,
    AuthTokenToJSON,
    Errors,
    ErrorsFromJSON,
    ErrorsToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface RefreshTokenRequest {
    inlineObject?: InlineObject;
}

export interface SignInRequest {
    authParam?: AuthParam;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * ログインユーザの情報を取得する
     */
    async getSignInUserRaw(): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/sign_in_user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ログインユーザの情報を取得する
     */
    async getSignInUser(): Promise<User> {
        const response = await this.getSignInUserRaw();
        return await response.value();
    }

    /**
     * ログインユーザのセッションを更新する
     */
    async refreshTokenRaw(requestParameters: RefreshTokenRequest): Promise<runtime.ApiResponse<AuthToken>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     * ログインユーザのセッションを更新する
     */
    async refreshToken(inlineObject?: InlineObject): Promise<AuthToken> {
        const response = await this.refreshTokenRaw({ inlineObject: inlineObject });
        return await response.value();
    }

    /**
     * ログインする
     */
    async signInRaw(requestParameters: SignInRequest): Promise<runtime.ApiResponse<AuthToken>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthParamToJSON(requestParameters.authParam),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     * ログインする
     */
    async signIn(authParam?: AuthParam): Promise<AuthToken> {
        const response = await this.signInRaw({ authParam: authParam });
        return await response.value();
    }

}
